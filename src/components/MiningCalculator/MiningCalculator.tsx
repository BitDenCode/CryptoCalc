'use client';

import { useState, useEffect } from 'react';
import axios from 'axios';
import Papa from 'papaparse';
import styles from './MiningCalculator.module.css';

interface Crypto {
  id: string;
  name: string;
  image: string;
}

const MiningCalculator = () => {
  const [hashrate, setHashrate] = useState('');
  const [powerConsumption, setPowerConsumption] = useState('');
  const [electricityCost, setElectricityCost] = useState('');
  const [cryptoPrice, setCryptoPrice] = useState<number | null>(null);
  const [dailyProfit, setDailyProfit] = useState<number | null>(null);
  const [dailyCost, setDailyCost] = useState<number | null>(null);
  const [profitability, setProfitability] = useState<number | null>(null);
  const [selectedCrypto, setSelectedCrypto] = useState('bitcoin');
  const [cryptos, setCryptos] = useState<Crypto[]>([]);
  const [blockReward, setBlockReward] = useState('');
  const [networkDifficulty, setNetworkDifficulty] = useState('');
  const [manualPrice, setManualPrice] = useState('');

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
  useEffect(() => {
    const fetchCryptos = async () => {
      const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets', {
        params: {
          vs_currency: 'usd',
          order: 'market_cap_desc',
          per_page: 10,
          page: 1,
        },
      });
      setCryptos(response.data);
    };

    fetchCryptos();
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
  useEffect(() => {
    const fetchCryptoPrice = async () => {
      const response = await axios.get(`https://api.coingecko.com/api/v3/simple/price`, {
        params: {
          ids: selectedCrypto,
          vs_currencies: 'usd',
        },
      });
      setCryptoPrice(response.data[selectedCrypto]?.usd || 0);
    };

    fetchCryptoPrice();
  }, [selectedCrypto]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
  const calculateMiningProfitability = () => {
    const hashrateNum = parseFloat(hashrate);
    const powerNum = parseFloat(powerConsumption);
    const electricityNum = parseFloat(electricityCost);
    const reward = parseFloat(blockReward) || 6.25; // Default reward (for Bitcoin)
    const difficulty = parseFloat(networkDifficulty) || 1000000; // Default difficulty

    if (isNaN(hashrateNum) || isNaN(powerNum) || isNaN(electricityNum) || !cryptoPrice) {
      setDailyProfit(null);
      setDailyCost(null);
      setProfitability(null);
      return;
    }

    // –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å: –≤—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
    const earningsPerDay = (hashrateNum * reward * 86400) / (difficulty * 1000000);
    const energyCostPerDay = (powerNum * 24) * (electricityNum / 1000); // –í–∞—Ç—Ç –≤ –∫–∏–ª–æ–≤–∞—Ç—Ç

    const profitPerDay = earningsPerDay * (manualPrice ? parseFloat(manualPrice) : cryptoPrice) - energyCostPerDay;

    setDailyProfit(profitPerDay);
    setDailyCost(energyCostPerDay);
    setProfitability((profitPerDay / energyCostPerDay) * 100); // ROI –ø–æ –∑–∞—Ç—Ä–∞—Ç–∞–º –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ CSV
  const downloadCSV = () => {
    if (dailyProfit !== null && dailyCost !== null && profitability !== null) {
      const data = [
        { Parameter: 'Selected cryptocurrency', Value: selectedCrypto },
        { Parameter: 'Profit for the day ($)', Value: dailyProfit.toFixed(2) },
        { Parameter: 'Energy costs ($)', Value: dailyCost.toFixed(2) },
        { Parameter: 'ROI (%)', Value: profitability.toFixed(2) },
        { Parameter: 'Net profit for the day ($)', Value: (dailyProfit - dailyCost).toFixed(2) },
      ];

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º papaparse –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV
      const csv = Papa.unparse(data);
      
      // –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      if (link.download !== undefined) {
        // –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'mining_calculation.csv');
        link.click();
      }
    }
  };

  return (
    <div className={styles.miningCalculator}>
      <h2>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∞–π–Ω–∏–Ω–≥–∞</h2>

      <div className="space-y-4">
        <div>
          
          <select
            value={selectedCrypto}
            onChange={(e) => setSelectedCrypto(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
          >
            {cryptos.map((crypto) => (
              <option key={crypto.id} value={crypto.id}>
                {crypto.name}
              </option>
            ))}
          </select>
        </div>

        <div>
          
          <input
            placeholder="üìä –•—ç—à—Ä–µ–π—Ç (MH/s)"
            type="number"
            value={hashrate}
            onChange={(e) => setHashrate(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
          />
        </div>

        <div>
          
          <input
            placeholder="üí° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ (–í—Ç)"
            type="number"
            value={powerConsumption}
            onChange={(e) => setPowerConsumption(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
          />
        </div>

        <div>
          
          <input
            placeholder="üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ($/kWh)"
            type="number"
            value={electricityCost}
            onChange={(e) => setElectricityCost(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
          />
        </div>

        <div>
          
          <input
            placeholder="üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–ª–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6.25)"
            type="number"
            value={blockReward}
            onChange={(e) => setBlockReward(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
          />
        </div>

        <div>
          
          <input
            placeholder="üîß –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–µ—Ç–∏"
            type="number"
            value={networkDifficulty}
            onChange={(e) => setNetworkDifficulty(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
          />
        </div>

        <div>
          <label className="block mb-1">üí≤ –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã ($)</label>
          <input
            placeholder="üí≤ –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã"
            type="number"
            value={manualPrice || cryptoPrice || ''}
            onChange={(e) => setManualPrice(e.target.value)}
            className="w-full p-2 rounded bg-background border border-border text-text"
            disabled={!manualPrice && !cryptoPrice}
          />
        </div>

        <button
          onClick={calculateMiningProfitability}
          className="bg-accent-green text-black px-4 py-2 rounded hover:opacity-90 transition"
        >
          –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
        </button>

        {dailyProfit !== null && dailyCost !== null && profitability !== null && (
          <div className="mt-4 space-y-2">
            <p>
              <span className="font-semibold">–ü—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å:</span> ${dailyProfit.toFixed(2)}
            </p>
            <p>
              <span className="font-semibold">–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é:</span> ${dailyCost.toFixed(2)}
            </p>
            <p>
              <span className="font-semibold">ROI (–ø–æ –∑–∞—Ç—Ä–∞—Ç–∞–º –Ω–∞ —ç–Ω–µ—Ä–≥–∏—é):</span> {profitability.toFixed(2)}%
            </p>
            <p>
              <span className="font-semibold">–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –¥–µ–Ω—å:</span> ${(dailyProfit - dailyCost).toFixed(2)}
            </p>
          </div>
        )}

        <button
          onClick={downloadCSV}
          className="bg-accent-green text-black px-4 py-2 rounded hover:opacity-90 transition"
        >
          –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç CSV üì•
        </button>

        <p style={{ marginTop: '2rem', color: '#888888', fontSize: '0.9rem' }}>
          –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à—É —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ —Å —É—á—ë—Ç–æ–º –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –∏ –º–æ—â–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.
        </p>
      </div>
    </div>
  );
};

export default MiningCalculator;


